substitutions:
  device_name: esp142-test-esp32
  adress_ip: "192.168.0.142"
  friendly_name: esp142
  time_timezone: "Europe/Paris"
  
esphome:
  name: ${device_name}
  platform: ESP32
  board: lolin_d32

wifi:
  networks:
    - ssid: !secret wifi_mi4
      password: !secret mdpwifi_mi4
      priority: 2    
    - ssid: !secret wifi_esp
      password: !secret mdpwifi_esp
      priority: 0
    - ssid: !secret wifi
      password: !secret mdpwifi
      priority: 1
  reboot_timeout: 5min

  manual_ip:
    static_ip: ${adress_ip}
    gateway: 192.168.0.1
    subnet: 255.255.255.0


# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
web_server:
  port: 80



output:
  - platform: ac_dimmer
    id: variateur1
    gate_pin: GPIO01
    zero_cross_pin:
      number: GPIO03
      mode:
        input: true
      inverted: yes
      

climate:
  - platform: pid
    name: "PID Controller"
    id: pid_pv
    sensor: potar
    default_target_temperature: 5
    heat_output: variateur1
    control_parameters:
      kp: 0.5
      ki: 0.0
      kd: 0.0

sensor:

  - platform: pid
    name: "PID PV Result"
    type: RESULT
    
  - platform: pid
    name: "PID PV Heat"
    type: HEAT
    
  - platform: pid
    name: "PID PV Cool"
    type: COOL

  - platform: ct_clamp
    sensor: adc_sensor
    id: mesure_courant
    name: "Measured Current"
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 5  
      - calibrate_linear:
          # Measured value of 0 maps to 0A
          - 0.01 -> 0
          - 0.074 -> 4.77
          - 0.122 -> 7.82

  # Example source sensor
  - platform: adc
    pin: GPIO36
    id: adc_sensor
    attenuation: 11db

 # Potentiometre
  - platform: adc
    pin: GPIO39
    id: potar
    name: "${friendly_name} potar"
    unit_of_measurement: "%"
    update_interval: 1s
    accuracy_decimals: 1
    attenuation: 11db
    filters:
      - calibrate_linear:
        - 0. -> 0.0
        - 3.2 -> 10.0
        
  - platform: uptime
    name: "${friendly_name} Uptime Sensor"
    id: esp142_uptime
    update_interval: 60s

  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal Sensor"
    update_interval: 60s

#Etat de la connection
binary_sensor:
  - platform: status
    name: "${friendly_name} Status"

switch:
  - platform: template
    name: "PID Climate Autotune"
    turn_on_action:
      - climate.pid.autotune: pid_pv
      
  - platform: restart
    name: "${friendly_name}_Restart"
    
text_sensor:
  # IP address #
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP address"
      icon: "mdi:network-outline"
    ssid:
      name: "${friendly_name} Connected SSID"
    bssid:
      name: "${friendly_name} Connected BSSID"
  - platform: version
    id: text_sensor_version
    name: "${friendly_name} ESPHome Version"