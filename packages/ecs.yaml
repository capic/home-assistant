####################################################
#                                                  #
#              EAU CHAUDE SANITAIRE                #
#                                                  #
####################################################
utility_meter:
  energy_ecs1_usage_daily:
    source: sensor.energy_ecs_p_kw
    cycle: daily
    tariffs:
      - hp
      - hc
  energy_ecs1_usage_weekly:
    source: sensor.energy_ecs_p_kw
    cycle: weekly
    tariffs:
      - hp
      - hc
  energy_ecs1_usage_monthly:
    source: sensor.energy_ecs_p_kw
    cycle: monthly
    tariffs:
      - hp
      - hc
  energy_ecs1_usage_yearly:
    source: sensor.energy_ecs_p_kw
    cycle: yearly
    tariffs:
      - hp
      - hc
# Comptabilisation de l'énergie en surplus injectée dans l'ECS
  energy_ecs_surplus_usage_daily:
    source: sensor.puissance_ecs_surplus_injectee
    cycle: daily
    tariffs:
      - hp
      - hc
  energy_ecs_surplus_usage_weekly:
    source: sensor.puissance_ecs_surplus_injectee
    cycle: weekly
    tariffs:
      - hp
      - hc    
  energy_ecs_surplus_usage_monthly:
    source: sensor.puissance_ecs_surplus_injectee
    cycle: monthly
    tariffs:
      - hp
      - hc
  energy_ecs_surplus_usage_yearly:
    source: sensor.puissance_ecs_surplus_injectee
    cycle: yearly
    tariffs:
      - hp
      - hc

input_datetime:
  # Horaire Chauffe ECS
  horaire_ecs_debut:
    name: Horaire ECS Début
    has_date: false
    has_time: true
  horaire_ecs_fin:
    name: Horaire ECS Fin
    has_date: false
    has_time: true

input_select:
  ecs_ssol:
    name: Ecs_SSol
    icon: mdi:water-boiler
    options:
      - Auto
      - Arret
      - Marche ECS
      - Marche PV

input_boolean:
  ecs_av_pv:
    name: Ecs PV(=1 avec Routeur PV)
  
sensor:
# Affichage du temps de fonctionnement ce jour
  - platform: history_stats
    name: ECS Chauffage ce jour
    entity_id: binary_sensor.ecs_chauffe
    state: 'on'
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'

# Energie ECS mesurée avec integration 
  - platform: integration
    source: sensor.ecocompteur_ecs
    name: energy_ecs_p_kw
    unit_prefix: k
    method: left
    round: 2

# Energie ECS surplus injection
  - platform: integration
    source: sensor.puissance_ecs_surplus_injectee_w
    name: energy_ecs_surplus_injectee
    unit_prefix: k
    method: left
    round: 2

template:
####################################
# Si puissance superieur à 500w = ECS en Marche
  - binary_sensor:
    - name: "ecs_chauffe"
      unique_id: "ecs_chauffe"
      device_class: heat
      state: >-
          {% set a=states('sensor.ecocompteur_ecs')|float(default=0) %}
          {{ a > 500 }}

# Consommation hP + HC - addition des utility meter
  - sensor:
    - name: "Energie ECS Jour"
      unique_id: "energy_ecs1_daily"
      state: >-
        {% set p = states('sensor.energy_ecs1_usage_daily_hp') | float(default=0) | round(2) %}
        {% set o = states('sensor.energy_ecs1_usage_daily_hc') | float(default=0) | round(2) %}
        {{ (o + p) | round(2) }}
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total"  

    - name: "energy_ecs1_weekly"
      state: >-
        {% set p = states('sensor.energy_ecs1_usage_weekly_hp') | float(default=0) | round(2) %}
        {% set o = states('sensor.energy_ecs1_usage_weekly_hc') | float(default=0) | round(2) %}
        {{ (o + p) | round(2) }}
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total" 

    - name: "energy_ecs1_monthly"
      state: >-
        {% set p = states('sensor.energy_ecs1_usage_monthly_hp') | float(default=0) | round(2) %}
        {% set o = states('sensor.energy_ecs1_usage_monthly_hc') | float(default=0) | round(2) %}
        {{ (o + p) | round(2) }}
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total"  

    - name: "energy_ecs1_yearly"
      state: >-
        {% set p = states('sensor.energy_ecs1_usage_yearly_hp') | float(default=0) | round(2) %}
        {% set o = states('sensor.energy_ecs1_usage_yearly_hc') | float(default=0) | round(2) %}
        {{ (o + p) | round(2) }}
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total"  

# Puissance produite en surplus et injectée dans l'ECS EN kW
    - name: puissance_ecs_surplus_injectee
      unique_id: "puissance_ecs_surplus_injectee"
      device_class: "power"
      state_class: "measurement"    
      unit_of_measurement: "kW"
      state: >-
        {% set a=states('sensor.ecocompteur_ecs')|float(default=0) %}
        {% set b=states('sensor.envoy_122103023124_current_power_production')|float(default=0) %}
        {% if (a>0) and (b>10) %}          
          {{ a/1000 }}
        {%else%}
          0
        {%endif%}

# Puissance produite en surplus et injectée dans l'ECS en W
    - name: puissance_ecs_surplus_injectee_w
      unique_id: "puissance_ecs_surplus_injectee_w"
      device_class: "power"
      state_class: "measurement"    
      unit_of_measurement: "W"
      state: >-
        {% set a=states('sensor.ecocompteur_ecs')|float(default=0) %}
        {% set b=states('sensor.envoy_122103023124_current_power_production')|float(default=0) %}
        {% if (a>0) and (b>10) %}          
          {{ a }}
        {%else%}
          0
        {%endif%}
        


