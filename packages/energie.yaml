input_boolean:
  # H pleine/creuse
  hc_hp:
    name: Tarif HC-HP
    icon: mdi:power-settings

  forcage_hc_hp:
    name: Forcage HC
    icon: mdi:power-settings

  valid_delestage:
    name: validation Delestage PV
    icon: mdi:power-settings

  mem_delestage:
    name: memoire Delestage PV
    icon: mdi:power-settings

input_number:
  # Seuil Délestage
  seuil_delestage_pv:
    name: Seuil Délestage PV
    min: 0
    max: 1800
    unit_of_measurement: W
    icon: mdi:flash
    mode: box

input_datetime:
  # Horaire HC/HP
  horaire_hc_debut_1:
    name: Horaire HC Début 1
    has_date: false
    has_time: true
  horaire_hc_debut_2:
    name: Horaire HC Début 2
    has_date: false
    has_time: true

  horaire_hp_debut_1:
    name: Horaire HP Début 1
    has_date: false
    has_time: true
  horaire_hp_debut_2:
    name: Horaire HP Début 2
    has_date: false
    has_time: true

binary_sensor:
  - platform: template # = true si HC
    sensors:
      display_hp_hc:
        friendly_name: "HC"
        value_template: "{{ (states.input_boolean.hc_hp.state == 'off') }}"

sensor:  
  #EcoLegrand
  - platform: command_line
    name: "EcoCompteur ECS"
    command: curl -s 'http://192.168.0.26/inst.json' | jq '.data1'
    scan_interval: 60
    unit_of_measurement: W

  - platform: command_line
    name: "EcoCompteur RPAC"
    command: curl -s 'http://192.168.0.26/inst.json' | jq '.data2'
    scan_interval: 60
    unit_of_measurement: W

  - platform: command_line
    name: "EcoCompteur PAC"
    command: curl -s 'http://192.168.0.26/inst.json' | jq '.data3'
    scan_interval: 60
    unit_of_measurement: W

  - platform: command_line
    name: "EcoCompteur Clim"
    command: curl -s 'http://192.168.0.26/inst.json' | jq '.data4'
    scan_interval: 60
    unit_of_measurement: W

  - platform: command_line
    name: "EcoCompteur Total"
    command: curl -s 'http://192.168.0.26/inst.json' | jq '.data5'
    scan_interval: 60
    unit_of_measurement: W

  #Enedis supprimer avec la version HA 2021-06
#  - platform: myEnedis
#   token: okMOLa3RWnuDbFnxg3X5VhO2mvceDI5f8655HNaWuWGTG7y5nJfZAq
#    code: 23264544053089
#    heures_creuses: "[['01:54','06:54'], ['12:24', '15:24']]"
#    hc_cout: 0.1312
#    hp_cout: 0.1982
#    scan_interval: 3600
#    delay: 7200  # OPTION

template:
  - sensor:
# Cumul de PAC et RPAC
    - name: "puissance_pac_rpac"
      device_class: "energy"
      state_class: "measurement"
      unit_of_measurement: "W"
      state: >-
          {% set p = states('sensor.ecocompteur_pac') | float | round(2) %}
          {% set o = states('sensor.ecocompteur_rpac') | float | round(2) %}
          {{ (o + p) | round(2) }}

# Calcul puissance injecté sur le réseau
    - name: "p_injection_reseau"
      device_class: "energy"
      state_class: "total"
      unit_of_measurement: "kWh"
      state: >-
        {% set p = states('sensor.envoy_122103023124_current_energy_consumption') | float | round(2) %}
        {% set o = states('sensor.envoy_122103023124_current_energy_production') | float | round(2) %}
        {{ (o - p) | round(2) }}

#Indique que la machine à laver est en fonctionnement
  - binary_sensor:
      - name: "MaLaver en marche"
        delay_off:
          minutes: 5
        state: >
          {{ states('sensor.pc_mal')|float(default=0) > 10 }}
