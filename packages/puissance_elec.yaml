input_boolean:
  # H pleine/creuse
  hc_hp:
    name: Tarif HC-HP
    icon: mdi:power-settings

  forcage_hc_hp:
    name: Forcage HC
    icon: mdi:power-settings

  valid_delestage:
    name: validation Delestage PV
    icon: mdi:power-settings

  mem_delestage:
    name: memoire Delestage PV
    icon: mdi:power-settings

input_number:
  # Seuil Délestage
  seuil_delestage_pv:
    name: Seuil Délestage PV
    min: 0
    max: 1800
    unit_of_measurement: W
    icon: mdi:flash
    mode: box


input_datetime:
  # Horaire HC/HP
  horaire_hc_debut_1:
    name: Horaire HC Début 1
    has_date: false
    has_time: true
  horaire_hc_debut_2:
    name: Horaire HC Début 2
    has_date: false
    has_time: true

  horaire_hp_debut_1:
    name: Horaire HP Début 1
    has_date: false
    has_time: true
  horaire_hp_debut_2:
    name: Horaire HP Début 2
    has_date: false
    has_time: true

binary_sensor:
  - platform: template # = true si HC
    sensors:
      display_hp_hc:
        friendly_name: "HC"
        value_template: "{{ (states.input_boolean.hc_hp.state == 'off') }}"



  #Enedis supprimer avec la version HA 2021-06
#  - platform: myEnedis
#   token: okMOLa3RWnuDbFnxg3X5VhO2mvceDI5f8655HNaWuWGTG7y5nJfZAq
#    code: 23264544053089
#    heures_creuses: "[['01:54','06:54'], ['12:24', '15:24']]"
#    hc_cout: 0.1312
#    hp_cout: 0.1982
#    scan_interval: 3600
#    delay: 7200  # OPTION

template:
  - sensor:

# Consommation autres totale en W
    - name: "Puissance Autres"
      unique_id: "puissance_autres"
      state: >-
        {% set a = states('sensor.envoy_122103023124_current_power_consumption') | float(default=0) | round(2) %}
        {% set b = states('sensor.pzem_pisc_puissance') | float(default=0) | round(2) %}
        {% set c = states('sensor.pzem_sdb_puissance') | float(default=0) | round(2) %}
        {% set d = states('sensor.puissance_pac_rpac') | float(default=0) | round(2) %}
        {% set e = states('sensor.ecocompteur_ecs') | float(default=0) | round(2) %}          
        {% set f = states('sensor.pc_mal') | float(default=0) | round(2) %}
        {% set g = states('sensor.ecocompteur_wc') | float(default=0) | round(2) %}
        {% if (a-b-c-d-e-f-g) >= 0 %}
          {{ (a-b-c-d-e-f-g) | round(2) }}
        {% else%}
          0
        {%endif%}
      unit_of_measurement: "W"
      device_class: "power"
      state_class: "measurement"  

# Cumul de PAC et RPAC -> devenu inutile suite regroupement des TC en 1 seul sur l'ecocomppteur
    - name: "Puissance PAC+RPAC"
      unique_id: "puissance_pac_rpac"
      device_class: "power"
      state_class: "measurement"
      unit_of_measurement: "W"
      state: >-
        {% set pac = states('sensor.ecocompteur_pac') | float(default=0) | round(2) %}
        {{ (pac) | round(2) }}

# Calcul energie injectée sur le réseau du jour
    - name: "Envoy Energie Injectée Réseau Jour"
      unique_id: "envoy_energie_injectee_reseau_jour"
      device_class: "energy"
      state_class: "total"
      unit_of_measurement: "kWh"
      state: >-
        {% set prod = states('sensor.envoy_122103023124_today_s_energy_production') | float(default=0) | round(2) %}
        {% set conso = states('sensor.envoy_122103023124_today_s_energy_consumption') | float(default=0) | round(2) %}
        {% if prod>conso %}
          {{ (prod - conso)/1000 | round(2) }}
        {% else%}
          0
        {%endif%}

# Envoy:  Energie soutirée depuis le reseau
    - name: "Envoy Energie Totale Soutirée Jour"
      unique_id: "envoy_energie_totale_soutiree_jour"
      state: >-
        {% set prod = states('sensor.envoy_122103023124_today_s_energy_production') | float(default=0) | round(2) %}
        {% set conso = states('sensor.envoy_122103023124_today_s_energy_consumption') | float(default=0) | round(2) %}
        {% if conso>prod %}
            {{ (conso - prod)/1000 | round(2) }}
        {% else%}
          0
        {%endif%}        
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total"

# Envoy: Puissance injectée sur le réseau
    - name: "Envoy Puissance Injectée Réseau"
      unique_id: "envoy_puissance_injectee_reseau"
      device_class: "power"
      state_class: "measurement"
      unit_of_measurement: "w"
      state: >-
        {% set prod = states('sensor.envoy_122103023124_current_power_production') | float(default=0) | round(2) %}
        {% set conso = states('sensor.envoy_122103023124_current_power_consumption') | float(default=0) | round(2) %}
        {% if prod>conso %}
          {{ (prod - conso) | round(2) }}
        {% else%}
          0
        {%endif%}
# Envoy: Puissance soutirée sur le réseau
    - name: "Envoy Puissance soutirée Réseau"
      unique_id: "envoy_puissance_soutiree_reseau"
      device_class: "power"
      state_class: "measurement"
      unit_of_measurement: "w"
      state: >-
        {% set prod = states('sensor.envoy_122103023124_current_power_production') | float(default=0) | round(2) %}
        {% set conso = states('sensor.envoy_122103023124_current_power_consumption') | float(default=0) | round(2) %}
        {% if conso>prod %}
          {{ (conso - prod) | round(2) }}
        {% else%}
          0
        {%endif%}    

# Envoy: Convertion en kWh de la consommation energie jour
    - name: "Envoy Energie Totale Consommée Jour"
      unique_id: "envoy_energie_totale_conso_jour"
      state: >-
        {% set p = states('sensor.envoy_122103023124_today_s_energy_consumption') | float(default=0) | round(2) %}
        {{ (p / 1000) | round(2) }}
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total"      
 
# Envoy: Convertion en kWh de la production energie jour
    - name: "Envoy Energie Totale Produite Jour"
      unique_id: "envoy_energie_totale_prod_jour"
      state: >-
        {% set p = states('sensor.envoy_122103023124_today_s_energy_production') | float(default=0) | round(2) %}
        {{ (p / 1000) | round(2) }}
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total"       

#Indique que la machine à laver est en fonctionnement
  - binary_sensor:
      - name: "MaLaver en marche"
        delay_off:
          minutes: 5
        state: >
          {{ states('sensor.puissance_pc_mal')|float(default=0) > 15 }}

#Indique que SdB est en fonctionnement
  - binary_sensor:
      - name: "SdB en chauffe"
        delay_off:
          minutes: 5
        state: >
          {{ states('sensor.pzem_sdb_puissance')|float(default=0) > 15 }}

  
sensor:
# Energie ECS mesurée avec integration 
  - platform: integration
    source: sensor.ecocompteur_ecs
    name: energy_ecs_p_kw
    unit_prefix: k
    method: left
    round: 2

# Energie PAC mesurée avec integration 
  - platform: integration
    source: sensor.puissance_pac_rpac
    name: energy_pac_p_kw
    unit_prefix: k
    method: left
    round: 2

# Energie WC
  - platform: integration
    source: sensor.ecocompteur_wc
    name: energy_pc_wc
    unit_prefix: k
    method: left
    round: 2

# Energie VMC Niv0
  - platform: integration
    source: sensor.ecocompteur_vmc_niv0
    name: energy_vmc_n0
    unit_prefix: k
    #    method: left
    round: 2

# Energie Puissance autres 
  - platform: integration
    source: sensor.puissance_autres
    name: energy_autres
    unit_prefix: k
    #    method: left
    round: 2

# Energie PC MàL 
  - platform: integration
    source: sensor.puissance_pc_mal
    name: energy_pc_mal
    unit_prefix: k
    method: left
    round: 2

    